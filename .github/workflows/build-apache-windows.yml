name: Build Apache Portable (Windows x64 - Using Runner Env)

on:
  workflow_dispatch:
    inputs:
      apache_version:
        description: 'Apache httpd version to build (e.g., 2.4.59)'
        required: true
        type: string

env:
  # Apache 版本和源码 URL
  APACHE_VERSION: ${{ github.event.inputs.apache_version }}
  APACHE_MAJOR_VERSION: # Will be extracted later
  APR_VERSION: 1.7.5 # Adjust if needed for the target Apache version
  APR_UTIL_VERSION: 1.6.3 # Adjust if needed for the target Apache version
  APACHE_MIRROR: https://dlcdn.apache.org/httpd
  APR_MIRROR: https://dlcdn.apache.org/apr

  # 构建目录和安装目录
  SOURCE_DIR: ${{ github.workspace }}\source # Directory to store downloaded sources
  INSTALL_DIR: ${{ github.workspace }}\apache-install # Temporary install dir before packaging
  # Use the vcpkg triplet provided by the runner environment
  VCPKG_TRIPLET: x64-windows
  # VCPKG_INSTALLATION_ROOT is usually set by the runner, e.g., C:\vcpkg
  RUNNER_VCPKG_ROOT: C:\vcpkg

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout workflow code
        uses: actions/checkout@v4

      - name: Extract Major Apache Version
        id: get_major_version
        run: |
          $version = "${{ env.APACHE_VERSION }}"
          $majorVersion = ($version -split '\.')[0..1] -join '.'
          echo "APACHE_MAJOR_VERSION=$majorVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "Major version: $majorVersion"
        shell: pwsh

      - name: Setup MSVC developer environment
        uses: ilammy/msvc-dev-cmd@v1
        # This action sets up the necessary compiler paths

      # --- Use Pre-installed vcpkg ---
      - name: Verify vcpkg Environment
        run: |
          echo "Runner's expected vcpkg root: ${{ env.RUNNER_VCPKG_ROOT }}"
          if not exist "${{ env.RUNNER_VCPKG_ROOT }}\vcpkg.exe" (
            echo "Error: vcpkg.exe not found at ${{ env.RUNNER_VCPKG_ROOT }}"
            exit /b 1
          )
          echo "Attempting to run vcpkg from ${{ env.RUNNER_VCPKG_ROOT }}"
          "${{ env.RUNNER_VCPKG_ROOT }}\vcpkg" version
        shell: cmd

      # Optional: Cache vcpkg artifacts based on runner's vcpkg root
      # Note: The key doesn't track the exact vcpkg version, but caches based on OS and workflow files
      - name: Cache vcpkg packages
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.RUNNER_VCPKG_ROOT }}
          key: ${{ runner.os }}-vcpkg-cache
        #   key: ${{ runner.os }}-vcpkg-cache-${{ hashFiles('.github/workflows/*.yml') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-cache

      - name: Install Dependencies via pre-installed vcpkg
        run: |
          echo "Using vcpkg from ${{ env.RUNNER_VCPKG_ROOT }}"
          rem Explicitly specify the vcpkg root to avoid warnings and ensure correctness
          "${{ env.RUNNER_VCPKG_ROOT }}\vcpkg" install openssl pcre2 zlib brotli libxml2 nghttp2 curl --triplet ${{ env.VCPKG_TRIPLET }} --clean-after-build --vcpkg-root "${{ env.RUNNER_VCPKG_ROOT }}"
        shell: cmd
      # --- End vcpkg ---

      - name: Install Strawberry Perl
        run: choco install strawberryperl --yes --no-progress
        shell: cmd

      - name: Create Source Directory
        run: mkdir ${{ env.SOURCE_DIR }}
        shell: cmd

      - name: Download Apache httpd source
        shell: pwsh
        working-directory: ${{ env.SOURCE_DIR }}
        run: |
          $url = "${{ env.APACHE_MIRROR }}/httpd-${{ env.APACHE_VERSION }}.tar.gz"
          Write-Host "Downloading Apache from $url"
          Invoke-WebRequest -Uri $url -OutFile httpd.tar.gz
          tar -xzf httpd.tar.gz
          if (-not (Test-Path "httpd-${{ env.APACHE_VERSION }}")) { Write-Error "Failed to extract Apache source"; exit 1 }

      - name: Download APR source
        shell: pwsh
        working-directory: ${{ env.SOURCE_DIR }}
        run: |
          $url = "${{ env.APR_MIRROR }}/apr-${{ env.APR_VERSION }}.tar.gz"
          Write-Host "Downloading APR from $url"
          Invoke-WebRequest -Uri $url -OutFile apr.tar.gz
          tar -xzf apr.tar.gz
          Move-Item -Path "apr-${{ env.APR_VERSION }}" -Destination "httpd-${{ env.APACHE_VERSION }}/srclib/apr" -Force
          if (-not (Test-Path "httpd-${{ env.APACHE_VERSION }}/srclib/apr/include")) { Write-Error "Failed to move APR source"; exit 1 }
          pwd
          ls .
          ls httpd-${{ env.APACHE_VERSION }}/srclib/apr
          ls httpd-${{ env.APACHE_VERSION }}/srclib/apr/include

      - name: Download APR-Util source
        shell: pwsh
        working-directory: ${{ env.SOURCE_DIR }}
        run: |
          $url = "${{ env.APR_MIRROR }}/apr-util-${{ env.APR_UTIL_VERSION }}.tar.gz"
          Write-Host "Downloading APR-Util from $url"
          Invoke-WebRequest -Uri $url -OutFile apr-util.tar.gz
          tar -xzf apr-util.tar.gz
          Move-Item -Path "apr-util-${{ env.APR_UTIL_VERSION }}" -Destination "httpd-${{ env.APACHE_VERSION }}/srclib/apr-util" -Force
          if (-not (Test-Path "httpd-${{ env.APACHE_VERSION }}/srclib/apr-util/include")) { Write-Error "Failed to move APR-Util source"; exit 1 }
          pwd
          ls .
          ls httpd-${{ env.APACHE_VERSION }}/srclib/apr-util
          ls httpd-${{ env.APACHE_VERSION }}/srclib/apr-util/include

      - name: Configure Apache with CMake
        shell: cmd
        working-directory: ${{ env.SOURCE_DIR }}/httpd-${{ env.APACHE_VERSION }}
        run: |
          mkdir build
          cd build

          rem Use the known runner vcpkg root for the toolchain file
          set VCPKG_TOOLCHAIN_FILE=${{ env.RUNNER_VCPKG_ROOT }}\scripts\buildsystems\vcpkg.cmake
          echo "Using CMake Toolchain: %VCPKG_TOOLCHAIN_FILE%"

          cmake .. ^
              -G "Visual Studio 17 2022" -A x64 ^
              -DCMAKE_INSTALL_PREFIX="${{ env.INSTALL_DIR }}" ^
              -DCMAKE_TOOLCHAIN_FILE="%VCPKG_TOOLCHAIN_FILE%" ^
              -DVCPKG_TARGET_TRIPLET="${{ env.VCPKG_TRIPLET }}" ^
              -DAPR_INCLUDE_DIR="${{ env.SOURCE_DIR }}\httpd-${{ env.APACHE_VERSION }}\srclib\apr\include" ^
              -DAPU_INCLUDE_DIR="${{ env.SOURCE_DIR }}\httpd-${{ env.APACHE_VERSION }}\srclib\apr-util\include" ^
              -DINSTALL_LAYOUT="Relocatable" ^
              -DENABLE_MODULES="shared" ^
              -DENABLE_MPMS="winnt" ^
              -DENABLE_SSL="ON" ^
              -DENABLE_HTTP2="ON" ^
              -DENABLE_BROTLI="ON" ^
              -DENABLE_XML="ON" ^
              -DENABLE_NGHTTP2="ON" ^
              -DWITH_ZLIB="ON" ^
              -DWITH_PCRE="ON" ^
              -DOPENSSL_ROOT_DIR="${{ env.RUNNER_VCPKG_ROOT }}/installed/${{ env.VCPKG_TRIPLET }}" ^
              -DBROTLI_ROOT_DIR="${{ env.RUNNER_VCPKG_ROOT }}/installed/${{ env.VCPKG_TRIPLET }}" ^
              -DLIBXML2_ROOT_DIR="${{ env.RUNNER_VCPKG_ROOT }}/installed/${{ env.VCPKG_TRIPLET }}" ^
              -DNGHTTP2_ROOT_DIR="${{ env.RUNNER_VCPKG_ROOT }}/installed/${{ env.VCPKG_TRIPLET }}" ^
              -DZLIB_ROOT_DIR="${{ env.RUNNER_VCPKG_ROOT }}/installed/${{ env.VCPKG_TRIPLET }}" ^
              -DPCRE_ROOT_DIR="${{ env.RUNNER_VCPKG_ROOT }}/installed/${{ env.VCPKG_TRIPLET }}" ^
              -DCURL_ROOT_DIR="${{ env.RUNNER_VCPKG_ROOT }}/installed/${{ env.VCPKG_TRIPLET }}" ^
              -DENABLE_DEFLATE="shared" ^
              -DENABLE_HEADERS="shared" ^
              -DENABLE_PROXY="shared" ^
              -DENABLE_PROXY_CONNECT="shared" ^
              -DENABLE_PROXY_FTP="shared" ^
              -DENABLE_PROXY_HTTP="shared" ^
              -DENABLE_PROXY_FCGI="shared" ^
              -DENABLE_PROXY_SCGI="shared" ^
              -DENABLE_PROXY_WSTUNNEL="shared" ^
              -DENABLE_PROXY_AJP="shared" ^
              -DENABLE_PROXY_BALANCER="shared" ^
              -DENABLE_PROXY_EXPRESS="shared" ^
              -DENABLE_PROXY_HCHECK="shared" ^
              -DENABLE_PROXY_HTTP2="shared" ^
              -DENABLE_REWRITE="shared" ^
              -DENABLE_CACHE="shared" ^
              -DENABLE_CACHE_DISK="shared" ^
              -DENABLE_CACHE_SOCACHE="shared" ^
              -DENABLE_SOCACHE_SHMCB="shared" ^
              -DENABLE_SOCACHE_DBM="shared" ^
              -DENABLE_SOCACHE_MEMCACHE="OFF" ^
              -DENABLE_SESSION="shared" ^
              -DENABLE_SESSION_COOKIE="shared" ^
              -DENABLE_SESSION_CRYPTO="shared" ^
              -DENABLE_SESSION_DBM="shared" ^
              -DENABLE_AUTHNZ_FCGI="shared" ^
              -DENABLE_DAV="shared" ^
              -DENABLE_DAV_FS="shared" ^
              -DENABLE_DAV_LOCK="shared" ^
              -DENABLE_VHOST_ALIAS="shared" ^
              -DENABLE_INCLUDE="shared" ^
              -DENABLE_REQUEST="shared" ^
              -DENABLE_REMOTEIP="shared" ^
              -DENABLE_LUA="OFF"

      - name: Build Apache
        shell: cmd
        working-directory: ${{ env.SOURCE_DIR }}/httpd-${{ env.APACHE_VERSION }}/build
        run: |
          cmake --build . --config Release --parallel

      - name: Install Apache
        shell: cmd
        working-directory: ${{ env.SOURCE_DIR }}/httpd-${{ env.APACHE_VERSION }}/build
        run: |
          cmake --build . --config Release --target install

      - name: Adjust httpd.conf for Portability
        shell: pwsh
        run: |
          $confFile = "${{ env.INSTALL_DIR }}/conf/httpd.conf"
          if (Test-Path $confFile) {
            Write-Host "Checking/Updating ServerRoot in $confFile"
            $content = Get-Content $confFile -Raw
            $installDirEscaped = [regex]::Escape("${{ env.INSTALL_DIR }}".Replace('\', '/'))
            $newContent = $content -replace ('(Define\s+SRVROOT\s+")' + $installDirEscaped + '"'), '$1."'
            $newContent = $newContent -replace ('^ServerRoot\s+".*"'), 'ServerRoot "${SRVROOT}"'
            $newContent = $newContent -replace ('DocumentRoot\s+"[^"]*/htdocs"'), 'DocumentRoot "${SRVROOT}/htdocs"'
            $newContent = $newContent -replace ('<Directory\s+"[^"]*/htdocs">'), '<Directory "${SRVROOT}/htdocs">'
            $newContent = $newContent -replace ('ScriptAlias\s+/cgi-bin/\s+"[^"]*/cgi-bin/"'), 'ScriptAlias /cgi-bin/ "${SRVROOT}/cgi-bin/"'
            $newContent = $newContent -replace ('<Directory\s+"[^"]*/cgi-bin">'), '<Directory "${SRVROOT}/cgi-bin">'
            $newContent = $newContent -replace ('ErrorLog\s+"[^"]*/logs/error.log"'), 'ErrorLog "logs/error.log"'
            $newContent = $newContent -replace ('CustomLog\s+"[^"]*/logs/access.log"'), 'CustomLog "logs/access.log" common'
            $newContent | Set-Content -Path $confFile -Encoding UTF8 -NoNewline
            Write-Host "httpd.conf updated for relative paths."
          } else {
            Write-Warning "$confFile not found after install step."
          }

      - name: Create ZIP Package
        shell: pwsh
        run: |
          $packageName = "apache-${{ env.APACHE_VERSION }}-win-x64.zip"
          $packagePath = "${{ github.workspace }}/$packageName"
          Compress-Archive -Path "${{ env.INSTALL_DIR }}\*" -DestinationPath $packagePath -Force
          echo "PACKAGE_NAME=$packageName" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "PACKAGE_PATH=$packagePath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: apache-${{ env.APACHE_VERSION }}-win-x64
          name: Apache httpd ${{ env.APACHE_VERSION }} (Windows x64 Portable)
          body: |
            Automated build of Apache httpd v${{ env.APACHE_VERSION }} for Windows x64 (Portable).
            Compiled on ${{ runner.os }} using the runner's pre-installed environment.
          files: ${{ env.PACKAGE_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}