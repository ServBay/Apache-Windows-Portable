name: Build Apache Portable (Windows x64)

on:
  workflow_dispatch:
    inputs:
      apache_version:
        description: 'Apache httpd version to build (e.g., 2.4.59)'
        required: true
        type: string

env:
  # Apache 版本和源码 URL
  APACHE_VERSION: ${{ github.event.inputs.apache_version }}
  APACHE_MAJOR_VERSION: # Will be extracted later
  APR_VERSION: 1.7.4 # Adjust if needed for the target Apache version
  APR_UTIL_VERSION: 1.6.3 # Adjust if needed for the target Apache version
  APACHE_MIRROR: https://dlcdn.apache.org/httpd
  APR_MIRROR: https://dlcdn.apache.org/apr

  # 构建目录和安装目录
  SOURCE_DIR: ${{ github.workspace }}/source # Directory to store downloaded sources
  INSTALL_DIR: ${{ github.workspace }}/apache-install # Temporary install dir before packaging
  VCPKG_ROOT: ${{ github.workspace }}/vcpkg
  VCPKG_COMMIT_ID: 'a9e343b5647ca11f86646037f369111e9c8a878a' # Pin vcpkg commit for reproducibility, check for newer stable commits
  VCPKG_TRIPLET: x64-windows

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout workflow code
        uses: actions/checkout@v4

      - name: Extract Major Apache Version
        id: get_major_version
        run: |
          $version = "${{ env.APACHE_VERSION }}"
          $majorVersion = ($version -split '\.')[0..1] -join '.'
          echo "APACHE_MAJOR_VERSION=$majorVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "Major version: $majorVersion"
        shell: pwsh

      - name: Setup MSVC developer environment
        uses: ilammy/msvc-dev-cmd@v1

      # --- vcpkg Setup ---
      - name: Checkout vcpkg
        uses: actions/checkout@v4
        with:
          repository: 'microsoft/vcpkg'
          ref: ${{ env.VCPKG_COMMIT_ID }}
          path: ${{ env.VCPKG_ROOT }}
          # fetch-depth: 0 # Uncomment if you need history, otherwise 1 is faster

      - name: Bootstrap vcpkg
        run: |
          cd ${{ env.VCPKG_ROOT }}
          .\bootstrap-vcpkg.bat -disableMetrics
        shell: cmd

      - name: Cache vcpkg packages
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.VCPKG_ROOT }}/installed/
            ${{ env.VCPKG_ROOT }}/packages/
            ${{ env.VCPKG_ROOT }}/buildtrees/
            ${{ env.VCPKG_ROOT }}/downloads/
            !${{ env.VCPKG_ROOT }}/downloads/*.tmp
          key: ${{ runner.os }}-vcpkg-${{ env.VCPKG_COMMIT_ID }}-${{ hashFiles(format('{0}/scripts/ports.cmake', env.VCPKG_ROOT)) }}-${{ hashFiles('**/vcpkg.json', '.github/workflows/*.yml') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-${{ env.VCPKG_COMMIT_ID }}-

      - name: Install Dependencies via vcpkg
        run: |
          ${{ env.VCPKG_ROOT }}/vcpkg install openssl pcre2 zlib brotli libxml2 nghttp2 --triplet ${{ env.VCPKG_TRIPLET }} --clean-after-build
        shell: cmd
      # --- End vcpkg Setup ---

      - name: Install Strawberry Perl (needed for some build scripts)
        run: choco install strawberryperl --yes --no-progress
        shell: cmd

      - name: Create Source Directory
        run: mkdir ${{ env.SOURCE_DIR }}
        shell: cmd

      - name: Download Apache httpd source
        shell: pwsh
        working-directory: ${{ env.SOURCE_DIR }}
        run: |
          $url = "${{ env.APACHE_MIRROR }}/httpd-${{ env.APACHE_VERSION }}.tar.gz"
          Write-Host "Downloading Apache from $url"
          Invoke-WebRequest -Uri $url -OutFile httpd.tar.gz
          tar -xzf httpd.tar.gz
          if (-not (Test-Path "httpd-${{ env.APACHE_VERSION }}")) {
            Write-Error "Failed to extract Apache source"
            exit 1
          }

      - name: Download APR source
        shell: pwsh
        working-directory: ${{ env.SOURCE_DIR }}
        run: |
          $url = "${{ env.APR_MIRROR }}/apr-${{ env.APR_VERSION }}.tar.gz"
          Write-Host "Downloading APR from $url"
          Invoke-WebRequest -Uri $url -OutFile apr.tar.gz
          tar -xzf apr.tar.gz
          Move-Item -Path "apr-${{ env.APR_VERSION }}" -Destination "httpd-${{ env.APACHE_VERSION }}/srclib/apr" -Force
          if (-not (Test-Path "httpd-${{ env.APACHE_VERSION }}/srclib/apr")) {
            Write-Error "Failed to move APR source"
            exit 1
          }

      - name: Download APR-Util source
        shell: pwsh
        working-directory: ${{ env.SOURCE_DIR }}
        run: |
          $url = "${{ env.APR_MIRROR }}/apr-util-${{ env.APR_UTIL_VERSION }}.tar.gz"
          Write-Host "Downloading APR-Util from $url"
          Invoke-WebRequest -Uri $url -OutFile apr-util.tar.gz
          tar -xzf apr-util.tar.gz
          Move-Item -Path "apr-util-${{ env.APR_UTIL_VERSION }}" -Destination "httpd-${{ env.APACHE_VERSION }}/srclib/apr-util" -Force
          if (-not (Test-Path "httpd-${{ env.APACHE_VERSION }}/srclib/apr-util")) {
            Write-Error "Failed to move APR-Util source"
            exit 1
          }

      - name: Configure Apache with CMake
        shell: cmd
        working-directory: ${{ env.SOURCE_DIR }}/httpd-${{ env.APACHE_VERSION }}
        run: |
          mkdir build
          cd build

          cmake .. ^
              -G "Visual Studio 17 2022" -A x64 ^
              -DCMAKE_INSTALL_PREFIX="${{ env.INSTALL_DIR }}" ^
              -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake" ^
              -DVCPKG_TARGET_TRIPLET="${{ env.VCPKG_TRIPLET }}" ^
              -DINSTALL_LAYOUT="Relocatable" ^
              -DENABLE_MODULES="shared" ^
              -DENABLE_MPMS="winnt" ^
              -DENABLE_SSL="ON" ^
              -DENABLE_HTTP2="ON" ^
              -DOPENSSL_ROOT_DIR="${{ env.VCPKG_ROOT }}/installed/${{ env.VCPKG_TRIPLET }}" ^
              -DENABLE_BROTLI="ON" ^
              -DBROTLI_ROOT_DIR="${{ env.VCPKG_ROOT }}/installed/${{ env.VCPKG_TRIPLET }}" ^
              -DENABLE_XML="ON" ^
              -DLIBXML2_ROOT_DIR="${{ env.VCPKG_ROOT }}/installed/${{ env.VCPKG_TRIPLET }}" ^
              -DENABLE_NGHTTP2="ON" ^
              -DNGHTTP2_ROOT_DIR="${{ env.VCPKG_ROOT }}/installed/${{ env.VCPKG_TRIPLET }}" ^
              -DWITH_ZLIB="ON" ^
              -DZLIB_ROOT_DIR="${{ env.VCPKG_ROOT }}/installed/${{ env.VCPKG_TRIPLET }}" ^
              -DWITH_PCRE="ON" ^
              -DPCRE_ROOT_DIR="${{ env.VCPKG_ROOT }}/installed/${{ env.VCPKG_TRIPLET }}" ^
              -DENABLE_DEFLATE="shared" ^
              -DENABLE_HEADERS="shared" ^
              -DENABLE_PROXY="shared" ^
              -DENABLE_PROXY_CONNECT="shared" ^
              -DENABLE_PROXY_FTP="shared" ^
              -DENABLE_PROXY_HTTP="shared" ^
              -DENABLE_PROXY_FCGI="shared" ^
              -DENABLE_PROXY_SCGI="shared" ^
              -DENABLE_PROXY_WSTUNNEL="shared" ^
              -DENABLE_PROXY_AJP="shared" ^
              -DENABLE_PROXY_BALANCER="shared" ^
              -DENABLE_PROXY_EXPRESS="shared" ^
              -DENABLE_PROXY_HCHECK="shared" ^
              -DENABLE_PROXY_HTTP2="shared" ^
              -DENABLE_REWRITE="shared" ^
              -DENABLE_CACHE="shared" ^
              -DENABLE_CACHE_DISK="shared" ^
              -DENABLE_CACHE_SOCACHE="shared" ^
              -DENABLE_SOCACHE_SHMCB="shared" ^
              -DENABLE_SOCACHE_DBM="shared" ^
              -DENABLE_SOCACHE_MEMCACHE="OFF" ^
              -DENABLE_SESSION="shared" ^
              -DENABLE_SESSION_COOKIE="shared" ^
              -DENABLE_SESSION_CRYPTO="shared" ^
              -DENABLE_SESSION_DBM="shared" ^
              -DENABLE_AUTHNZ_FCGI="shared" ^
              -DENABLE_DAV="shared" ^
              -DENABLE_DAV_FS="shared" ^
              -DENABLE_DAV_LOCK="shared" ^
              -DENABLE_VHOST_ALIAS="shared" ^
              -DENABLE_INCLUDE="shared" ^
              -DENABLE_REQUEST="shared" ^
              -DENABLE_REMOTEIP="shared" ^
              -DENABLE_LUA="OFF"

      - name: Build Apache
        shell: cmd
        working-directory: ${{ env.SOURCE_DIR }}/httpd-${{ env.APACHE_VERSION }}/build
        run: |
          cmake --build . --config Release --parallel

      - name: Install Apache
        shell: cmd
        working-directory: ${{ env.SOURCE_DIR }}/httpd-${{ env.APACHE_VERSION }}/build
        run: |
          cmake --build . --config Release --target install

      - name: Adjust httpd.conf for Portability (Ensure ServerRoot is relative)
        shell: pwsh
        run: |
          $confFile = "${{ env.INSTALL_DIR }}/conf/httpd.conf"
          if (Test-Path $confFile) {
            Write-Host "Checking/Updating ServerRoot in $confFile"
            $content = Get-Content $confFile -Raw
            # The Relocatable layout should set ServerRoot to '.', but we double-check
            # If it's an absolute path based on INSTALL_DIR, replace it with a relative path.
            # Example: Replace 'Define SRVROOT "D:/a/repo/repo/apache-install"' with 'Define SRVROOT "." '
            $installDirEscaped = [regex]::Escape("${{ env.INSTALL_DIR }}".Replace('\', '/'))
            $newContent = $content -replace ('(Define\s+SRVROOT\s+")' + $installDirEscaped + '"'), '$1."' # Use "." for current dir
            # Also ensure ServerRoot directive itself uses the variable or is relative
            $newContent = $newContent -replace ('^ServerRoot\s+".*"'), 'ServerRoot "${SRVROOT}"'

            # Ensure paths like DocumentRoot, ErrorLog, etc., use SRVROOT
            # This might require more specific replacements depending on the default httpd.conf
            $newContent = $newContent -replace ('DocumentRoot\s+"[^"]*/htdocs"'), 'DocumentRoot "${SRVROOT}/htdocs"'
            $newContent = $newContent -replace ('<Directory\s+"[^"]*/htdocs">'), '<Directory "${SRVROOT}/htdocs">'
            $newContent = $newContent -replace ('ScriptAlias\s+/cgi-bin/\s+"[^"]*/cgi-bin/"'), 'ScriptAlias /cgi-bin/ "${SRVROOT}/cgi-bin/"'
            $newContent = $newContent -replace ('<Directory\s+"[^"]*/cgi-bin">'), '<Directory "${SRVROOT}/cgi-bin">'
            $newContent = $newContent -replace ('ErrorLog\s+"[^"]*/logs/error.log"'), 'ErrorLog "logs/error.log"' # Relative to ServerRoot
            $newContent = $newContent -replace ('CustomLog\s+"[^"]*/logs/access.log"'), 'CustomLog "logs/access.log" common' # Relative to ServerRoot

            $newContent | Set-Content -Path $confFile -Encoding UTF8 -NoNewline
            Write-Host "httpd.conf updated for relative paths."
          } else {
            Write-Warning "$confFile not found after install step."
          }

      - name: Create ZIP Package
        shell: pwsh
        run: |
          $packageName = "apache-httpd-${{ env.APACHE_VERSION }}-win64-portable.zip"
          $packagePath = "${{ github.workspace }}/$packageName"
          Compress-Archive -Path "${{ env.INSTALL_DIR }}\*" -DestinationPath $packagePath -Force
          echo "PACKAGE_NAME=$packageName" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "PACKAGE_PATH=$packagePath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.APACHE_VERSION }}
          name: Apache httpd ${{ env.APACHE_VERSION }} (Windows x64 Portable)
          body: |
            Automated build of Apache httpd v${{ env.APACHE_VERSION }} for Windows x64 (Portable).
            Compiled on ${{ runner.os }}.
            vcpkg commit: `${{ env.VCPKG_COMMIT_ID }}`
          files: ${{ env.PACKAGE_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is automatically provided by GitHub