name: Build Apache on Windows

on:
#   push:
#     branches: [ main ] # Trigger on push to main branch
  workflow_dispatch: # Allow manual trigger
    inputs:
      is_debug:
        description: 'Pause for 6 hours before build'
        default: false
        required: false
        type: boolean

jobs:
  build:
    runs-on: windows-latest # Use the latest Windows runner

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4 # Checks out your repository code

    - name: Install Prerequisites
      run: |
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=User' -y
        choco install strawberryperl nasm --yes --no-progress --limit-output
        choco feature enable -n=allowGlobalConfirmation
        echo "C:\Strawberry\c\bin;C:\Strawberry\perl\site\bin;C:\Strawberry\perl\bin;C:\Program Files\NASM;C:\Program files\CMake\;C:\Program Files\CMake\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      shell: pwsh

    - name: Setup RDP
      id: setup-rdp
      if: ${{ github.event.inputs.is_debug == 'true' }}
      shell: pwsh
      env:
        # 从 Secrets 传入 ngrok Authtoken 和 RDP 密码
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        RDP_PASSWORD: ${{ secrets.RDP_PASSWORD }}
      run: |
        $ngrokLogFile = "$env:GITHUB_WORKSPACE\ngrok.log"
        $ngrokProcess = $null
        $rdpUser = "runneradmin"

        # 检查 NGROK_AUTH_TOKEN 和 RDP_PASSWORD 是否设置
        if ([string]::IsNullOrEmpty($env:NGROK_AUTH_TOKEN)) {
          Write-Error "NGROK_AUTH_TOKEN secret is not set. Cannot start RDP session."
          exit 1
        }
        if ([string]::IsNullOrEmpty($env:RDP_PASSWORD)) {
          Write-Error "RDP_PASSWORD secret is not set. Cannot create RDP user."
          exit 1
        }

        # --- 创建 RDP 用户并设置密码 ---
        Write-Host "Setting RDP user '$rdpUser'..."
        try {
          Write-Host "Setting password for user '$rdpUser'..."
          $securePassword = ConvertTo-SecureString -String $env:RDP_PASSWORD -AsPlainText -Force
          try { Get-LocalUser -Name $rdpUser | Set-LocalUser -Password $securePassword -ErrorAction Stop; Write-Host "Password set via Set-LocalUser."}
          catch { Write-Warning "Set-LocalUser failed: $($_.Exception.Message). Trying 'net user'..."; iex "net user $rdpUser '$($env:RDP_PASSWORD)'"; if ($LASTEXITCODE -ne 0) { throw "net user failed too."}; Write-Host "Password set via 'net user'." }
        } catch {
          Write-Error "Failed to configure RDP user '$rdpUser': $_"
          if (Get-LocalUser -Name $rdpUser -ErrorAction SilentlyContinue) { Remove-LocalUser -Name $rdpUser -ErrorAction SilentlyContinue }
          exit 1
        }

        Write-Host "Ensuring RDP is enabled..."
        try {
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0 -Force -ErrorAction Stop
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop" -ErrorAction Stop
          Write-Host "RDP enabled and firewall rule checked."
        } catch { Write-Warning "Failed to explicitly enable RDP or firewall rule: $_. Assuming it's already configured." }

        Write-Host "Setting up ngrok..."
        try { choco install ngrok -y --force --no-progress --ignore-checksums }
        catch {
          Write-Warning "Chocolatey install failed or choco not found. Attempting manual download..."
          $ngrokZip = "$env:TEMP\ngrok.zip"; $ngrokExe = "$env:TEMP\ngrok.exe"
          Invoke-WebRequest "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip" -OutFile $ngrokZip
          Expand-Archive $ngrokZip -DestinationPath $env:TEMP -Force
          Move-Item "$env:TEMP\ngrok.exe" $ngrokExe -Force
          Remove-Item $ngrokZip -Force
          $env:PATH += ";$env:TEMP"
        }
        if (-not (Get-Command ngrok -ErrorAction SilentlyContinue)) { Write-Error "ngrok command not found after installation attempts."; Remove-LocalUser -Name $rdpUser -ErrorAction SilentlyContinue; exit 1 }
        Write-Host "Configuring ngrok authtoken..."
        ngrok config add-authtoken $env:NGROK_AUTH_TOKEN --log=stdout

        Write-Host "Starting ngrok RDP tunnel (TCP port 3389)..."
        $ngrokArgs = "tcp 3389 --log `"$ngrokLogFile`""
        try {
          $ngrokProcess = Start-Process ngrok -ArgumentList $ngrokArgs -WindowStyle Hidden -PassThru -ErrorAction Stop
          Write-Host "ngrok process started (PID: $($ngrokProcess.Id)). Waiting for tunnel info..."
          Start-Sleep -Seconds 15
          $rdpUrl = $null; $maxAttempts = 5; $attempt = 0
          while ($attempt -lt $maxAttempts -and -not $rdpUrl) {
              $attempt++; if (Test-Path $ngrokLogFile) { $logContent = Get-Content $ngrokLogFile -Raw -ErrorAction SilentlyContinue; $match = $logContent | Select-String -Pattern 'url=(tcp://[^ ]+)'; if ($match) { $rdpUrl = $match.Matches[0].Groups[1].Value; Write-Host "RDP Connection URL found: $rdpUrl"; break } }
              Write-Host "Waiting for ngrok URL in log... (Attempt $attempt/$maxAttempts)"; Start-Sleep -Seconds 5
          }
          if (-not $rdpUrl) { Write-Error "Failed to retrieve RDP connection URL from ngrok log ($ngrokLogFile) after $maxAttempts attempts."; if ($ngrokProcess) { Stop-Process -Id $ngrokProcess.Id -Force -ErrorAction SilentlyContinue }; Remove-LocalUser -Name $rdpUser -ErrorAction SilentlyContinue; exit 1 }
          Write-Host "----------------------------------------------------------------------"
          Write-Host "ACTION REQUIRED: Manual installation needed via RDP."
          Write-Host "Connect using an RDP client to: $rdpUrl"
          Write-Host "Username: $rdpUser"
          Write-Host "Password: Use the value from your RDP_PASSWORD secret."
          Write-Host "----------------------------------------------------------------------"
        } catch { Write-Error "Failed to start ngrok process: $_"; if ($ngrokProcess) { Stop-Process -Id $ngrokProcess.Id -Force -ErrorAction SilentlyContinue }; Remove-LocalUser -Name $rdpUser -ErrorAction SilentlyContinue; exit 1 }

    - name: Create Source Directory
      run: mkdir src
      shell: cmd # Use cmd for simple directory creation

    - name: Download and Extract Dependencies
      shell: powershell
      run: |
        # Helper function for downloading and extracting
        function Get-AndExtract($url, $archiveName, $extractDir) {
          New-Item -ItemType Directory -Force -Path $extractDir
          $downloadPath = Join-Path $env:RUNNER_TEMP $archiveName
          echo "Downloading $url to $downloadPath"
          Invoke-WebRequest -Uri $url -OutFile $downloadPath
          echo "Extracting $downloadPath to $extractDir"
          # Handle .tar.xz (common formats)
          if ($archiveName -like '*.tar.xz') {
            xz -dc $downloadPath | tar -xf - -C $extractDir --strip-components=1
          } else {
            tar -zxf $downloadPath -C $extractDir --strip-components=1
          }
          # Remove the archive after extraction
          # Remove-Item $downloadPath
        }

        $baseSrcPath = Join-Path $env:GITHUB_WORKSPACE "src"

        # Define packages and URLs
        $packages = @{
          "zlib-1.3.1"          = "https://zlib.net/zlib-1.3.1.tar.gz"
          "pcre2-10.45"         = "https://github.com/PCRE2Project/pcre2/releases/download/pcre2-10.45/pcre2-10.45.tar.gz"
          "expat-2.7.1"         = "https://github.com/libexpat/libexpat/releases/download/R_2_7_1/expat-2.7.1.tar.gz"
          "openssl-3.3.3"       = "https://www.openssl.org/source/openssl-3.3.3.tar.gz"
          "libxml2-2.14.1"      = "https://github.com/GNOME/libxml2/archive/refs/tags/v2.14.1.tar.gz"
          "jansson-2.14.1"      = "https://github.com/akheron/jansson/releases/download/v2.14.1/jansson-2.14.1.tar.gz"
          "brotli-1.1.0"        = "https://github.com/google/brotli/archive/refs/tags/v1.1.0.tar.gz"
          "lua-5.4.7"           = "https://www.lua.org/ftp/lua-5.4.7.tar.gz"
          "apr-1.7.5"           = "https://dlcdn.apache.org/apr/apr-1.7.5.tar.gz"
          "apr-iconv-1.2.2"     = "https://dlcdn.apache.org/apr/apr-iconv-1.2.2.tar.gz"
          "apr-util-1.6.3"      = "https://dlcdn.apache.org/apr/apr-util-1.6.3.tar.gz"
          "nghttp2-1.65.0"      = "https://github.com/nghttp2/nghttp2/releases/download/v1.65.0/nghttp2-1.65.0.tar.gz"
          "curl-8.13.0"         = "https://curl.se/download/curl-8.13.0.tar.gz"
          "httpd-2.4.63"        = "https://dlcdn.apache.org/httpd/httpd-2.4.63.tar.gz"
          "mod_fcgid-2.3.9"     = "https://dlcdn.apache.org/httpd/mod_fcgid/mod_fcgid-2.3.9.tar.gz"
        }

        # Download and extract each package
        foreach ($pkgName in $packages.Keys) {
          $url = $packages[$pkgName]
          $archiveName = $url.Split('/')[-1]
          $extractPath = Join-Path $baseSrcPath $pkgName

          Get-AndExtract -url $url -archiveName $archiveName -extractDir $extractPath

          # Verify extraction by checking if the directory exists
          if (-not (Test-Path $extractPath)) {
            echo "ERROR: Extraction failed or directory $extractPath not found for $pkgName"
            exit 1
          } else {
             echo "Successfully extracted $pkgName to $extractPath"
          }
        }


    - name: Copy CMakeLists.txt to lua-5.4.7
      shell: powershell
      run: |
        $baseSrcPath = Join-Path $env:GITHUB_WORKSPACE "src"
        $extractPath = Join-Path $baseSrcPath "lua-5.4.7"
        Copy-Item "lua-5.4.7\CMakeLists.txt" -Destination $extractPath

    - name: Set up MSBuild and VS Environment
      uses: microsoft/setup-msbuild@v2 # Sets up MSBuild and VS dev environment

    - name: Set VCVARSALL environment variable
      id: set_vcvars
      shell: powershell
      run: |
        $vcvarsPath = ""
        # Try finding via VCINSTALLDIR (often set by VS setup actions)
        if ($env:VCINSTALLDIR) {
          $potentialPath = Join-Path $env:VCINSTALLDIR "Auxiliary\Build\vcvars64.bat"
          if (Test-Path $potentialPath) {
            $vcvarsPath = $potentialPath
            echo "Found vcvarsall.bat via VCINSTALLDIR: $vcvarsPath"
          }
        }

        # Fallback to default VS 2022 Enterprise path if not found yet
        if (-not $vcvarsPath) {
          $potentialPath = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          if (Test-Path $potentialPath) {
            $vcvarsPath = $potentialPath
            echo "Found vcvarsall.bat via default VS 2022 Enterprise path: $vcvarsPath"
          }
        }

        # Fallback to default VS 2022 Community path
        if (-not $vcvarsPath) {
            $potentialPath = "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat"
            if (Test-Path $potentialPath) {
                $vcvarsPath = $potentialPath
                echo "Found vcvarsall.bat via default VS 2022 Community path: $vcvarsPath"
            }
        }

        # Fallback to (x86) path (less likely for VS 2022 but check just in case)
        if (-not $vcvarsPath) {
          $potentialPath = "C:\Program Files (x86)\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
           if (Test-Path $potentialPath) {
            $vcvarsPath = $potentialPath
            echo "Found vcvarsall.bat via (x86) VS 2022 Enterprise path: $vcvarsPath"
          }
        }

        if ($vcvarsPath) {
          echo "Setting VCVARSALL environment variable."
          # Use GitHub Actions environment file syntax to set for subsequent steps
          echo "VCVARSALL=$vcvarsPath" >> $env:GITHUB_ENV
        } else {
          echo "ERROR: Could not locate vcvars64.bat. Build might fail."
          # Optionally fail the job: exit 1
        }

    - name: Pause for Debugging
      id: pause
      shell: powershell
      if: ${{ github.event.inputs.is_debug == 'true' }}
      run: |
        Start-Sleep -Seconds 21600

    - name: Run Build Script
      env:
        # Set environment variables for the modified build script
        BUILD_BASE_ENV: ${{ github.workspace }}\build
        PREFIX_ENV: C:\ServBay\packages\apache
        # VCVARSALL should be implicitly set by setup-msbuild, but double-check if issues arise
      run: |
        echo "VCVARSALL is set to: %VCVARSALL%"
        echo "Starting build_all.bat..."
        call build_all.bat
      shell: cmd # Use cmd to run the batch script

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: apache-windows-build # Name of the artifact zip file
        path: C:\ServBay\packages\apache # Path to the directory to upload
        if-no-files-found: error # Fail the step if the directory is empty or not found
