name: Build Apache on Windows

on:
#   push:
#     branches: [ main ] # Trigger on push to main branch
  workflow_dispatch: # Allow manual trigger

jobs:
  build:
    runs-on: windows-latest # Use the latest Windows runner

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4 # Checks out your repository code

    - name: Install Prerequisites
      run: |
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
        choco install strawberryperl -y
        choco install nasm -y
        choco install 7zip.install -y
      shell: powershell

    - name: Add 7zip to PATH # Ensure 7z is available in subsequent steps
      run: |
        echo "C:\Program Files\7-Zip" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      shell: powershell

    - name: Create Source Directory
      run: mkdir src
      shell: cmd # Use cmd for simple directory creation

    - name: Download and Extract Dependencies
      shell: powershell # Use PowerShell for better scripting capabilities
      run: |
        # Helper function for downloading and extracting
        function Get-AndExtract($url, $archiveName, $extractDir) {
          $downloadPath = Join-Path $env:RUNNER_TEMP $archiveName
          echo "Downloading $url to $downloadPath"
          Invoke-WebRequest -Uri $url -OutFile $downloadPath
          echo "Extracting $downloadPath to $extractDir"
          # Handle .tar.gz and .tar.xz (common formats)
          if ($archiveName -like '*.tar.gz' -or $archiveName -like '*.tar.xz') {
            # Extract the tar from the archive first, then extract the contents
            7z x $downloadPath -so | 7z x -aoa -si -ttar -o"$extractDir"
          } elseif ($archiveName -like '*.zip') {
             7z x $downloadPath -aoa -o"$extractDir"
          } else {
             echo "ERROR: Unsupported archive type for $archiveName"
             exit 1
          }
          # Remove the archive after extraction
          Remove-Item $downloadPath
        }

        $baseSrcPath = Join-Path $env:GITHUB_WORKSPACE "src"

        # Define packages and URLs
        $packages = @{
          "zlib-1.3.1"          = "https://zlib.net/zlib-1.3.1.tar.gz"
          "pcre2-10.45"         = "https://github.com/PCRE2Project/pcre2/releases/download/pcre2-10.45/pcre2-10.45.tar.gz"
          "expat-2.7.1"         = "https://github.com/libexpat/libexpat/releases/download/R_2_7_1/expat-2.7.1.tar.gz"
          "openssl-3.3.3"       = "https://www.openssl.org/source/openssl-3.3.3.tar.gz"
          # "openssl-1.1.1w"      = "https://www.openssl.org/source/openssl-1.1.1w.tar.gz"
          "libxml2-2.14.1"      = "https://download.gnome.org/sources/libxml2/2.14/libxml2-2.14.1.tar.xz"
          "jansson-2.14.1"      = "https://github.com/akheron/jansson/releases/download/v2.14.1/jansson-2.14.1.tar.gz"
          "brotli-1.1.0"        = "https://github.com/google/brotli/archive/refs/tags/v1.1.0.tar.gz"
          "lua-5.4.7"           = "https://www.lua.org/ftp/lua-5.4.7.tar.gz"
          "apr-1.7.5"           = "https://dlcdn.apache.org/apr/apr-1.7.5.tar.gz"
          "apr-iconv-1.2.2"     = "https://dlcdn.apache.org/apr/apr-iconv-1.2.2.tar.gz"
          "apr-util-1.6.3"      = "https://dlcdn.apache.org/apr/apr-util-1.6.3.tar.gz"
          "nghttp2-1.65.0"      = "https://github.com/nghttp2/nghttp2/releases/download/v1.65.0/nghttp2-1.65.0.tar.gz"
          "curl-8.13.0"         = "https://curl.se/download/curl-8.13.0.tar.gz"
          "httpd-2.4.63"        = "https://dlcdn.apache.org/httpd/httpd-2.4.63.tar.gz"
          "mod_fcgid-2.3.9"     = "https://dlcdn.apache.org/httpd/mod_fcgid/mod_fcgid-2.3.9.tar.gz"
        }

        # Download and extract each package
        foreach ($pkgName in $packages.Keys) {
          $url = $packages[$pkgName]
          $archiveName = $url.Split('/')[-1]
          $extractPath = Join-Path $baseSrcPath $pkgName

          Get-AndExtract -url $url -archiveName $archiveName -extractDir $extractPath

          # Verify extraction by checking if the directory exists
          if (-not (Test-Path $extractPath)) {
            echo "ERROR: Extraction failed or directory $extractPath not found for $pkgName"
            exit 1
          } else {
             echo "Successfully extracted $pkgName to $extractPath"
          }
        }

    - name: Set up MSBuild and VS Environment
      uses: microsoft/setup-msbuild@v2 # Sets up MSBuild and VS dev environment

    - name: Set VCVARSALL environment variable
      id: set_vcvars
      shell: powershell
      run: |
        $vcvarsPath = ""
        # Try finding via VCINSTALLDIR (often set by VS setup actions)
        if ($env:VCINSTALLDIR) {
          $potentialPath = Join-Path $env:VCINSTALLDIR "Auxiliary\Build\vcvars64.bat"
          if (Test-Path $potentialPath) {
            $vcvarsPath = $potentialPath
            echo "Found vcvarsall.bat via VCINSTALLDIR: $vcvarsPath"
          }
        }

        # Fallback to default VS 2022 Enterprise path if not found yet
        if (-not $vcvarsPath) {
          $potentialPath = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          if (Test-Path $potentialPath) {
            $vcvarsPath = $potentialPath
            echo "Found vcvarsall.bat via default VS 2022 Enterprise path: $vcvarsPath"
          }
        }

        # Fallback to default VS 2022 Community path
        if (-not $vcvarsPath) {
            $potentialPath = "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat"
            if (Test-Path $potentialPath) {
                $vcvarsPath = $potentialPath
                echo "Found vcvarsall.bat via default VS 2022 Community path: $vcvarsPath"
            }
        }

        # Fallback to (x86) path (less likely for VS 2022 but check just in case)
        if (-not $vcvarsPath) {
          $potentialPath = "C:\Program Files (x86)\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
           if (Test-Path $potentialPath) {
            $vcvarsPath = $potentialPath
            echo "Found vcvarsall.bat via (x86) VS 2022 Enterprise path: $vcvarsPath"
          }
        }

        if ($vcvarsPath) {
          echo "Setting VCVARSALL environment variable."
          # Use GitHub Actions environment file syntax to set for subsequent steps
          echo "VCVARSALL=$vcvarsPath" >> $env:GITHUB_ENV
        } else {
          echo "ERROR: Could not locate vcvars64.bat. Build might fail."
          # Optionally fail the job: exit 1
        }

    - name: Run Build Script
      env:
        # Set environment variables for the modified build script
        BUILD_BASE_ENV: ${{ github.workspace }}\build
        PREFIX_ENV: C:\ServBay\packages\apache
        # VCVARSALL should be implicitly set by setup-msbuild, but double-check if issues arise
      run: |
        echo "VCVARSALL is set to: %VCVARSALL%"
        echo "Starting build_all.bat..."
        call build_all.bat
      shell: cmd # Use cmd to run the batch script

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: apache-windows-build # Name of the artifact zip file
        path: C:\ServBay\packages\apache # Path to the directory to upload
        if-no-files-found: error # Fail the step if the directory is empty or not found
